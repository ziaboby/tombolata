{
	"info": {
		"_postman_id": "291c7ca6-9e16-42ec-9c04-9902ad146e4d",
		"name": "Tombolata",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12874960"
	},
	"item": [
		{
			"name": "Auth -  failed - wrong code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return output set to false\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.be.false;\r",
							"    pm.expect(jsonData.pusherJs).to.be.undefined;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth - failed - empty body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return output set to false\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.be.false;\r",
							"    pm.expect(jsonData.pusherJs).to.be.undefined;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}"
				},
				"url": {
					"raw": "http://localhost:3000/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth - succeed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return output set to false\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Should include PusherJs settings\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.pusherJs).to.be.exist;\r",
							"    pm.expect(jsonData.pusherJs.apiKey).to.be.exist;\r",
							"    pm.expect(jsonData.pusherJs.cluster).to.be.exist;\r",
							"    pm.expect(jsonData.pusherJs.channelName).to.be.exist;\r",
							"    pm.expect(jsonData.pusherJs.events).to.be.exist;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"code\": 5555\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:3000/api/auth",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tombolone status - activated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return a positive response confirming activation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.true;\r",
							"    pm.expect(jsonData.value).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/tombolone/active?value=1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"tombolone",
						"active"
					],
					"query": [
						{
							"key": "value",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tombolone status - activated 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return a value equals to 1, even considering the input value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.true;\r",
							"    pm.expect(jsonData.value).to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/tombolone/active?value=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"tombolone",
						"active"
					],
					"query": [
						{
							"key": "value",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tombolone status - deactivated",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return a positive response confirming deactivation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.true;\r",
							"    pm.expect(jsonData.value).to.eql(0);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/tombolone/active?value=0",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"tombolone",
						"active"
					],
					"query": [
						{
							"key": "value",
							"value": "0"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tombolone status - failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Shoud failing for missing value param\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.false;\r",
							"    pm.expect(jsonData.value).to.be.undefined;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/tombolone/active",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"tombolone",
						"active"
					]
				}
			},
			"response": []
		},
		{
			"name": "Tombolone new number - succeed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return a positive response with the new number value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.true;\r",
							"    pm.expect(jsonData.value).to.eql(5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/tombolone/number?value=5",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"tombolone",
						"number"
					],
					"query": [
						{
							"key": "value",
							"value": "5"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tombolone new number - failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return a negative response with a string (not number)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.false;\r",
							"    pm.expect(jsonData.value).to.eql(\"5a\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/tombolone/number?value=5a",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"tombolone",
						"number"
					],
					"query": [
						{
							"key": "value",
							"value": "5a"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Tombolone new number - failed for missing param",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Should return a negative response with a string (not number)\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.output).to.false; \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:3000/api/tombolone/number",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"api",
						"tombolone",
						"number"
					]
				}
			},
			"response": []
		}
	]
}